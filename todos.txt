[GENERAL]
1. Check if this works with Deno; 	

[v0.3]

1. Tree-construction task: 
	Scour the previous parser projects, distinguish different 'types/patterns' of trees
		to be constructed (there are at least 4 that can be seen already...); 

2. Scour previous projects for various aliases, ideas for things to put into the library...

3. Cache all the remaining functions into separate exports. Example: the 'Stream' module. 
	Use a more 'object-oriented' approach - use 'this' + fields instead of creating functions with variable information "beat-into" them

A. testing (fix old tests, create new ones); 
B. documentation (change/fix it...); 

For v0.4: 

1. STACK! 
	The library is VERY stack heavy, and this is (largely) impossible to fix on its own. 

	SOLUTION: use the CPS style. 
		Re-implement library (whilst keeping the non-CPS version) in CPS, 
		with an infinite 'stack'; 

	! THIS WILL REQUIRE FOR ONE TO FIRST IMPLEMENT THE INFINITE CPS-BASED STACK LIBRARY!
	That one should: 
		0. Be written in TypeScript; 
		Include Types: 
		1. InfiniteStack; 
		2. CPSArray (this is, ultimately, a CPS version of JS array);

2. Negative numbers? 
	Alter the 'predicateChoice' to allow for negative numbers (the '.prev')? 
	This'd mean (ultimately) just adding a more convinient syntax for stuff like 'RevertedStream'; 
	Except, it would also require that all Streams used be REVERSIBLE...; 

	Think about this. 
	
3. Write proper JSDoc documentation for all this stuff...

	DO NOT add the 'docs' copies into JSDoc, INSTEAD, just reference them...