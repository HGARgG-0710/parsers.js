[GENERAL]
1. Check if this works with Deno; 	

[v0.3]
2. Idea for new functions: 

	NOTE: the 'utilities' and other parts of the library must ALL support the new 'stateful' signature...;
	
	2.1. a utility - `extract`: 

		Reverse+generalization of 'limit' - splits a given Stream into 
			pieces, [extracted: any[][], remains: any[][]], 
			with: 
			
				Array(extracted.length).fill(0).map((_x, i) => [remains[i], extracted[i]]).flat().reduce((last, curr) => last.concat(curr), []) === transform((x) => x)(input)

		Where 'input' is the passed `Stream`.
		Useful for defining more complex predicate-based Pattern-s; 

	2.2. a utility `prolong`/'extend' - concats the results of `transform((x) => x)`. 
		The result is a Collection consisting of elements of several different streams.

	2.3. StreamPattern:
		A `Pattern` implementation based off `extract` and a `Stream`. 

3. NEGATIVE NUMBERS!

	Alter the 'predicateChoice' to allow for negative numbers (the '.prev'); 

4. Write proper JSDoc documentation for all this stuff...

	DO NOT add the 'docs' copies into JSDoc, INSTEAD, just reference them...

5. Tree-construction task: 

	Scour the previous parser projects, distinguish different 'types/patterns' of trees
		to be constructed (there are at least 4 that can be seen already...); 

6. Scour previous projects for various aliases, ideas for things to put into the library...

7. This list is for tracking source files with mangled types (WHICH DON'T SHOW ANY ERRORS... Revise carefully): 
		1. PatternTokenizer 
		2. PatternValidator

	! WALK THROUGH THE FILES ADN FIND MORE MANGLED TYPES!

8. Cache ALL functions into separate exports. Example: the 'Stream' module. 
	Use a more 'object-oriented' approach - use 'this' + fields instead of creating functions with variable information "beat-into" them


A. testing (fix old tests, create new ones); 
B. documentation (change/fix it...); 

For v0.4: 

	STACK! 
	The library is VERY stack heavy, and this is (largely) impossible to fix on its own. 

	SOLUTION: use the CPS style. 
		Re-implement library (whilst keeping the non-CPS version) in CPS, 
		with an infinite 'stack'; 

	! THIS WILL REQUIRE FOR ONE TO FIRST IMPLEMENT THE INFINITE CPS-BASED STACK LIBRARY!